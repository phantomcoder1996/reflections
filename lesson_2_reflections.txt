How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is like a container where you can store all the files with related changes that you need to commit together under a certain theme. It allows you to choose which files you want to commit ,so that you don’t have to commit all the files in your working directory.It’s also different from the repository which contains all commits that you have submitted.
value offered:
1.Choosing a set of file to commit ,so that you don’t need to commit all files in the working directory.
2.Ability to reset the staging area using “git reset filename” if you change your mind about committing a certain file.


How can you use the staging area to make sure you have one commit per logical change?
When you carry out a change in your working directory , you then submit this change to the staging area. To make sure that it's a single logical change , you run the command "git diff --staged "to compare the staging area with the most recent commit. At this point ,you can check whether  a single logical change has been made since the last commit. If you find that there is more than one logical change , you can then use "git reset filename "to remove a file from the staging area ,so as to make sure that the changes in the remaining files in the staging area all lie in one logical band, then commit those changes together and write a suitable commit message.
Note that if it wasn't for the staging area , you would have had to commit all the changes in the working directory at once . This means you won't be able to control which changes are included in a certain commit and thus you won't be able to write a suitable commit message.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1.when you want to try a new version of the project and return to a certain checkpoint.
2.When you want to make a version of your project in a different language.
3.In general ,when the changes you make represent an experimental feature you want to try or to allow your mates to try ,while maintaining a working version of your project.


How do the diagrams help you visualize the branch structure?
The diagrams allow me to visualise the whole repository as a road having a certain starting point, which is the initial commit . You continue along the same road solving problems and editing (committing changes)until you reach some point where you need to carry out a rooted change or try something new,so you branch and try it out moving along a new path. As you go along this path, you can easily branch at any time and you can even return to your previous checkpoint.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
the results combining all the changes in the two branches.Any thing that was in the original file before branching and was deleted by one  of the programmers is discarded. Any thing that was not present in the original file ,but was added in one if the two branches is added to the merged version. when you merge to branches ,u checkout the branch which will label the merged commit (usually the master)and then u merge the other branches into that branch. As a result, the new commit has more than one parent. you then delete the other unnecessary branches as their commits can be reached through the master branch This simply deletes the label.